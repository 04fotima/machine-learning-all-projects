# numbers = []
# for i in range(3):
#     i = int(input("enter num:"))
#     numbers.append(i)
# numbers.reverse()    
# print(f"reverse: {numbers}")

# num = int(input("enter num:"))
# if num % 2 == 0:
#     print(f"{num} is even")
# else:
#     print(f"{num} is odd")

# num1 = int(input("enter num1:"))
# num2 = int(input("enter num2:"))
# num3 = int(input("enter num3:"))
# if num1 == num2 == num3:
#     print("All the three numbers assume the same value")
# elif num1 == num2 or num2 == num3 or num1 == num3:
#     print("two numbers same")
# else:
#     print("All the three numbers assume a different value")        


# num = []
# for i in range(3):
#     i = int(input("enter nums:"))
#     num.append(i)
# if ((num[0] > num[1]) and (num[0] > num[2])):
#     print(f"num1 is large {num[0]}")
# elif ((num[0] < num[1]) and (num[2] < num[1])):
#     print(f"num2 is large {num[1]}")
# else:
#     print(f"num3 is large {num[2]}")    


# exp = input("Input expression: ").split()
# operator = exp[0]
# operator1 = float(exp[1])
# operator2 = float(exp[2])
# if operator == "+":
#     print(f"result: {operator1} + {operator2} = {operator1 + operator2}")
# elif operator == "-":
#     print(f"result: {operator1 - operator2}")
# elif operator == "*":
#     print(f"result: {operator1 * operator2}")
# elif operator == "/":
#     print(f"result: {operator1 / operator2}")    


# year = int(input("enter year:"))
# if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
#     print(f"{year} is a leap year")

# a = int(input("enter num:"))
# b = int(input("enter num:"))
# c = int(input("enter num:"))
# if a == 0:
#     print("this is quardratec qution can not be zero")
# else:
#     descermenant = b**2 -4*a*c
#     if descermenant > 0:
#         root1 = (-b - math.sqrt(descermenant)) / (2*a)
#         root2 = (-b + math.sqrt(descermenant)) / (2*a)
#         print(f"The roots are real and distinct: root1 = {root1}, root2 = {root2}")
#     elif descermenant == 0:
#         root = -b / (2*a)
#         print(f"The roots are real and equal: root = {root}")
#     else:
#             real_p = -b / (2*a)
#             imaginary = math.sqrt(abs(descermenant)) / (2*a)
 
#             print(f"imaginary {imaginary}")


# n = int(input("enter num:"))
# if n <= 0:
#     print("please enter positive num")
# else:  
#     total = 0  
#     for i in range(n):
#         num = int(input(f"enter numbers {i + 1}:"))
#         total += num
#         avg = total / (n)
# print(f"avg: {avg}")

# def harmonic_sum(n):
#     if n <= 0:
#         print("please enter positive num")
#         return
        
#     total = 0.0
#     for i in range(1, n + 1):
#         total += 1.0 / i
#     print(f"sum is: {total}")
# try:
#     num = int(input("enter positive num:")) 
#     harmonic_sum(num)
# except ValueError:
#     print("please enter positive num")

# positive = []
# negative = []
# num = int(input("enter num:"))
# for i in range(num):
#     n = int(input(f"enter numbers {i + 1}:"))
#     if n < 0:
#         negative.append(n)
#     elif n > 0:
#         positive.append(n)
# Sum = sum(positive)
# Sum1 = sum(negative)
# print(f"positive is: {Sum}")
# print(f"negative is: {Sum1}")



# def euclidean_gcd(x,y):
#     maximum = max(x,y)
#     minimum = min(x,y)
#     while maximum % minimum != 0:
#         temp = maximum % minimum
#         maximum, minimum = minimum, temp
#     return minimum
# x = int(input("enter x:"))
# y = int(input("enter y:"))
# print("result:", euclidean_gcd(x,y))

# def check_sequence():
#     n = int(input("enter num:"))
#     if n <= 0:
#         print("please enter positive num")
#         return
#     try:    
#         num = list(map(int,input(f"enter numbers {n}:").split()))
#         if len(num) != n:
#             print("please enter correct num of numbers")
#             return 
#     except ValueError:
#         print("please enter numbers")
#         return
#     if all(num[i] > num[i-1] for i in range(1, n)):
#         print("ascending")  
#     elif all(num[i] < num[i-1] for i in range(1, n)):
#         print("descending")
#     else:
#         print('neither ascending nor descending sequence')
# check_sequence()        

# def check_largest():
#     n = int(input("enter num:"))
#     while n < 2:
#         n = int(input("please enter positive num"))
#     num = [float(input(f"enter numbers {i+1}:")) for i in range(n)]
#     largest, second_largest = sorted[-2:]
#     print("two largest values:", largest, "and", second_largest)
# check_largest()

        
# n = int(input("enter num:"))
# for i in range(n):
#     for j in range(10):
#         print(f"{(i,j)}", end=" ")
#     print()


# for i in range(10):
#     for j in range(10):
#         print(f"{i*10+j}", end=" ")
#     print()    


# for i in range(4, 0, -1):
#     for j in range(i):
#         print("*", end=" ")
#     print()    

# n =5
# for i in range(n):
#     print(" " * i + "*" * n)
   

   

# n = 4
# for i in range(n):
#     print("-"* i + "*" + "+" * (n-i-1)) 


# n = int(input("enter num:"))
# for i in range(n):
#     print("*", end="")

# n = int(input("enter num:"))
# num = 1
# for row in range(1, n+1):
#     for j in range(min(row,n)):
#         print(num, end=" ")
#         num += 1
#     print()    
#     n -= row


# n = int(input("Enter an odd number: "))  # Foydalanuvchidan toq son olish

# for i in range(n):
#     for j in range(n):
#         if i == j or i + j == n - 1:  # Diagonal shartlar
#             print("*", end="")
#         else:
#             print(" ", end="")
#     print()


# n = int(input("enter num:"))
# for i in range(n):
#     for j in range(n):
#         if i == j or i + j == n - 1:
#             print("*", end="")
#         else:
#             print(" ", end="")
#     print()




# var
# ism = str(input("enter your name:"))
# yosh = str(input("enter your age:"))
# city = str(input("enter your city:"))
# print(f"Assalomu alaykum, {ism} sining yoshingiz {yosh}da va siz {city}da yashaysiz")


# num1 = 23
# num2 = 43 
# num3 = 1
# print(f"result: {num1 + num2 + num3}")

# numbers = 1
# num = int(input("enter num:"))
# for i in range(num):
#     n = int(input(f"enter nums {i+1}:"))
#     numbers *= n
# print(numbers)

# chap = 2
# ong = 2
# past = 3
# print(f"r: {chap + ong + past}")

# alls = []
# all = input("enter you all types:").split()
# for i in all:
#     alls.append(i)
# print(alls) 

# list
# mevalar = ["olma", "banan", "gilos"]
# print(mevalar[0])

# all = []
# color = input("enter color:").split()
# for i in color:
#     all.append(i)
# print(color)  

# List = []
# n = int(input("enter nums:"))
# for i in range(10, n, 1):
#     if i % 2 == 0:
#         List.append(i)
# print(List)

# num = list(map(int, input("Enter numbers: ").split())) 
# for i in range(len(num)-1):
#     if num[i] > num[i +1]:
#         num[i], num[i+1] == num[i+1], num[i]
# print(num)
    
# all =[]
# n = int(input("Enter the number of elements: "))  
# for a in range(n):
#     number = int(input(f"Enter number {a+1}: "))
#     all.append(number)
# print(sorted(all, reverse=True))

# all_lists = []
# Lists = int(input("enter list number:"))
# for i in range(Lists):
#     num = list(map(int, input(f"Enter number {i+1}: ").split()))
#     all_lists.extend(num)
#     for j in range(len(all_lists)-1):
#         if all_lists[j] > all_lists[j +1]:
#             all_lists[j], all_lists[j+1] = all_lists[j+1], all_lists[j]
# print(all_lists)


# tuples
# List = []
# mevalar = ("1", "4", "9", "3")
# for i in mevalar:
#     all = int(i)**2
#     List.append(all)
# print(List)


# nums = tuple(map(int, input("enter num:").split()))
# all = [nums**2 for nums in nums]
# print(all)


# dict
# name = input("enter name:").split()
# age = input("enter age:").split()
# city = input("enter city:").split()
# all = {"name": name, "age": age, "city": city}
# remove_elements =(input("enter number of elements to remove:"))
# if remove_elements in all:
#     del all[remove_elements]
#     print("remove element sucsefull")
# else:
#     print("element not found")

# print(all)


# name = input("enter name:").split()
# age = input("enter age:").split()
# city = input("enter city:").split()
# all = {"name": name, "age": age, "city": city}
# remove_elements =int(input("enter number of elements to remove:"))
# keys = list(all.keys())
# if 0 <= remove_elements < len(keys):
#     del all[keys[remove_elements]]
#     print("remove element sucsefull")
# else: 
#     print("element not found")
# print(all)

# all = dict(zip(name,zip(age, city)))

 # if remove_elements in all:
#     del all[remove_elements]
#     print("remove element sucsefull")   


# dict = {"name": "fotima", "age": 25, "city": "Tashkent"}
# sort =sorted(map(str, dict.values()))
# print(sort) 

# List = [1,2,3,3,4,5,5,6,7,7,"dkjg", 2.0]
# for i in List:
#     print(i) 


# n = int(input("enter numbers:"))
# for i in range(1,n+1):
#     print(i)
# List = []
# n = int(input("enter numbers:"))
# for i in range(n):
#     numbers = int(input(f"enter nums {i+1}:"))
#     List.append(numbers ** 2)
# print(List)


# diction = {"name": "fotima", "age": "25", "city": "Tash"}
# for i in diction.items():
#     print(i)

# def

# def my_function(x):
#     print(x**2)  
# my_function(5)

# def my_function():
#     ism = input("enter name:")
#     print(ism)
# my_function()   

# def my_function():
#     all = 0
#     num = [1,2,3,4,5,5,6,6,7,7]
#     for i in num:
#         all += i
#     avg = all / len(num)
#     print(int(avg))
# my_function()

# def max_min(x,y):
#     if x > y:
#         print(f"{x} is large {y} is small")
#     else:
#         print(f"{y} is large {x} is small")
# max_min(2,5)


# def my_function():
#     num = int(input("enter number:"))
#     for i in range(num):
#         numbers = int(input(f"enter nums {i+1}:"))
#     print(numbers)
# my_function()        


# Import necessary libraries
# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# from sklearn.model_selection import train_test_split
# from sklearn.linear_model import LinearRegression
# from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# url = 'https://media.geeksforgeeks.org/wp-content/uploads/20240320114716/data_for_lr.csv'
# data = pd.read_csv(url)

# data = data.dropna()

# X = data.iloc[:, :-1].values 
# y = data.iloc[:, 1].values    

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# model = LinearRegression()

# model.fit(X_train, y_train)

# y_pred = model.predict(X_test)

# mse = mean_squared_error(y_test, y_pred)
# mae = mean_absolute_error(y_test, y_pred)
# r2 = r2_score(y_test, y_pred)

# print(f"Mean Squared Error (MSE): {mse}")
# print(f"Mean Absolute Error (MAE): {mae}")
# print(f"R-squared (R2): {r2}")

# plt.scatter(X_test, y_test, color='blue', label='Actual Data')
# plt.plot(X_test, y_pred, color='red', label='Regression Line')
# plt.xlabel('Independent Variable (X)')
# plt.ylabel('Dependent Variable (Y)')
# plt.title('Linear Regression')
# plt.legend()
# plt.show()




import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Sun'iy ma'lumotlarni yaratish
np.random.seed(42)
data = {
    'Age': np.random.randint(18, 80, 100),  # Yosh oralig'i
    'Inflation': np.random.uniform(5, 20, 100),  # Inflyatsiya darajasi
    'Income': np.random.randint(1000, 10000, 100),  # Oylik daromad
    'Food_Consumption': np.random.randint(10, 200, 100)  # Oziq-ovqat iste'moli
}
df = pd.DataFrame(data)

# Ma'lumotlarni standartlashtirish
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)

# K-means klasterlash
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
df['Cluster'] = kmeans.fit_predict(df_scaled)

# Natijalarni chiqarish
plt.figure(figsize=(10, 6))
plt.scatter(df['Income'], df['Food_Consumption'], c=df['Cluster'], cmap='viridis', alpha=0.6)
plt.xlabel("Income")
plt.ylabel("Food Consumption")
plt.title("Uzbekistan Population Clustering based on Economic Factors")
plt.colorbar(label='Cluster')
plt.show()

# Har bir klasterni tahlil qilish
cluster_analysis = df.groupby('Cluster').mean()
print("\nCluster Analysis:\n", cluster_analysis)